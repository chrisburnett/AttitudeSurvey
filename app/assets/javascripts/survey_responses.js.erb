<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

window.surveyResponseId = 0;
window.progress = 10;

ready = function() {
    /* initial screen setup */
    $("#recipients-control-area").hide();
    $("#help-area-2").hide();
    $("#next-button").hide();
    $("#submit-button").prop("disabled", true);

    /* hide all the tick
 icons for now */
    $("span").hide();

    /* hash to track the assignment of cards - don't allow user to proceed until all cards */
    /* have been assigned */
    var dropCheck = {};
    /* hash to maintain where cards have been dropped */
    var cardsToCats = {};
    $(".card").each(function() {
        dropCheck[this.id] = false;
        /* assign descriptions to cards */
        $(this).popover({
            trigger: "hover",
            title: "Description",
            content: $(this).data("description")
        });
    });




    /* dragging/dropping functionality */
    $(".card-drop-area").droppable({
        accept: '.card',
        hoverClass: 'hover',
        tolerance: 'intersect',
        over: function ( event, ui ) {
            $(this).find($(".card-drop-area-description")).fadeTo(300,0);
            dropCheck[ui.draggable.attr( 'id' )] = true;
            updateCategorySubmit();
        },
        out: function ( event, ui ) {
            $(this).find($(".card-drop-area-description")).fadeTo(300,1);
            dropCheck[ui.draggable.attr( 'id' )] = false;
            updateCategorySubmit();
        },
        drop: function ( event, ui ) {
            var cardId = ui.draggable.attr( 'id' ).split("-")[1];
            var categoryId = $(this).attr('id').split("-")[1];
            ui.draggable.draggable( 'option', 'revert', false );
            /* find the matching hidden field and set it to the category */
            /* we do this by selecting the input field group and looking for the value */
            $('input[id^="survey_response_card_placement"][id$="card_id"][value="' + cardId + '"]').next('input').val(categoryId);
            $(this).find($(".card-drop-area-description")).fadeTo(300,1);
            dropCheck[ui.draggable.attr( 'id' )] = true;
            cardsToCats[ui.draggable.attr('id')] = this;
            updateCategorySubmit();
        }
    });
    $(".movable").draggable({
        stack: '.card',
        revert: true,
        containment: '#central-container',
        drag: function() {
            $(this).popover('hide')
        }
    });


    /* when the form is first submitted, get the response ID we can use for subsequent */
    /* AJAX calls */
    $("form").on("ajax:success", function(e, data, status, xhr) {
        window.surveyResponseId = JSON.parse(xhr.responseText).id;
        window.progress++;
        updateProgress();
    });
    /* move to recipient phase when first submit clicked */
    var currentRecipientIndex = 0;
   $("#submit-button").click(function() {
        /* show the next bits of the interface */
        $(this).replaceWith(function() { $("#next-button").show() });
        $("#help-area").replaceWith(function() { $("#help-area-2").show() });
        $("#categories-control-area").replaceWith(function() {
            $("#recipients-control-area").show();
        });
        /* clear states of card buttons and set toggle handler*/
        resetIcons();

        $("#recipient-name-header").html("<h2>" + gon.recipients[currentRecipientIndex].role + "</h2>");
        /* change card state when clicked */
        $(".card").click(function() {
            $(this).toggleClass("inactive");
            var okIcon = $(this).find($("span[class~='glyphicon-ok']"));
            var banIcon = $(this).find($("span[class~='glyphicon-ban-circle']"));
            if($(this).hasClass("inactive")) {
                okIcon.hide();
                banIcon.show();
            } else {
                okIcon.show();
                banIcon.hide();
            }
        })
        $("form").submit();
       lockCardsToCategories();
    });



    /* SHARING PREFERENCE COLLECTION */
    /* on moving to the next phase turn all cards into toggle button areas */
    /* watch the state of these */
    $("#next-button").click(function() {
        var sharingPrefs = [];
        var recipientId = gon.recipients[currentRecipientIndex].id;
        var surveyResponseId = 0;
        /* create JSON from states of cards */
        $(".card").each(function() {
            var cardId = $(this).attr('id').split("-")[1];
            var share = "true";
            if($(this).hasClass("inactive")) {
                share = "false";
            } else {
                share = "true";
            }
            sharingPrefs.push({ "recipient_id": recipientId, "card_id": cardId, "share": share });
        });

        /* send data to controller */
        var responseJSON = {"survey_response":{"sharing_prefs_attributes":sharingPrefs}};

        $.ajax({
            url: "<%= survey_responses_path %>/" + window.surveyResponseId,
            type: "PATCH",
            contentType: "application/json; charset=utf8",
            data: JSON.stringify(responseJSON)
        });

        /* reset buttons */
        resetIcons();

        /* if we are out of recipients, hide this button and show the final submit to get off this page (phew) */

        if(currentRecipientIndex == gon.recipients.length - 1) {
            /* redirect to the debrief */
            window.location.replace("<%= survey_responses_path %>/" + window.surveyResponseId);
        } else {
            currentRecipientIndex++;
            showNextRecipient();
        }
    });


    function resetIcons() {
        $(".card").toggleClass("inactive",true);
        $("span[class~='glyphicon-ban-circle']").show();
        $("span[class~='glyphicon-ok']").hide();
    }

    function showNextRecipient() {
        var header = $("#recipient-name-header");
        header.fadeToggle(function() {
            header.html("<h1>" + gon.recipients[currentRecipientIndex].role + "</h1>");
            header.fadeToggle();
        });
        window.progress++;
        updateProgress();
    }

    function updateCategorySubmit() {
        $("#submit-button").prop("disabled", false);
        $(".card").each(function() {
            if(dropCheck[$(this).attr( 'id' )] == false) {
                $("#submit-button").prop("disabled", true);
            }
        });
    }

    function updateProgress() {
        var currentWidth = $("#progressbar").css("width");
        $("#progressbar").css("width", currentWidth + (1/gon.recipients.length));
    }

    function lockCardsToCategories() {
        console.log(cardsToCats);
        $(".movable").each(function(index, elem) {
            $(elem).draggable({
                stack: '.card',
                revert: true,
                containment: $(cardsToCats[elem.id])
            });
        });
    }

};

$(document).ready(ready)
$(document).on('page:load', ready)
